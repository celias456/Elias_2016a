function [g_sT] = msm_g_st(seedstate,input,sT,EM,expectationshock,constant_2,n)
%Simulates the model and outputs moment differences
%   number for seedstate (seedstate)
%   Parameters (1x4) (input)
%   Number of time periods for each simulation (sT)
%   Empirical moments (1x4) (EM)
%   Weighting Matrix (W) 
%   Indicator for turning on expectation shocks (1x2) (expectationshock)
%   Indicator for constant in agent type 2's PLM (constant_2)
%   Number of replications (n)

%Returns 5x1 vector g_st
    %g_st(1): equity return mean difference
    %g_st(2): equity return variance difference
    %g_st(3): pd ratio mean difference
    %g_st(4): pd ratio variance difference
    %g_st(5): pd ratio auto covariance difference
    
stream = RandStream('mt19937ar','Seed',seedstate);
RandStream.setDefaultStream(stream);

%% Declarations
mu = input(1); %Proportion of agents in economy who have a correctly specified PLM (agent 1)
eshock_std = input(2); %Standard deviation of expectation shock
eshock_ro = input(3); %AR coefficient on expectation shock
gain1 = input(4); %Gain parameter for CG learning (agent 1)
gain2 = input(5); %Gain parameter for CG learning (agent 2)
gain = [gain1,gain2];

eshock_1_on = expectationshock(1,1); %Equals 1 if expectation shock for agent 1 is activated
eshock_2_on = expectationshock(1,2); %Equals 1 if expectation shock for agent 2 is activated

burn = sT/2; %Number of initial observations to remove

%% Deep parameters of the model (from Mathematica notebook)
ro  = 0.95; %AR parameter on shock
sde = 0.00712; %Standard deviation of the shock term
alpha = 0.36;
beta = 0.99;
delta = 0;
gamma = 1;
psi = (1-beta+delta*beta)/(alpha*beta);

%Coefficients of the reduced form  p(t) = a*E(p(t+1)+b*d(t)
a = beta;        
b = (1-beta-gamma)*ro + gamma;

%% Expectation Shock parameters
eshock_1_mean = 0; %Mean of expectation shock for agent 1
eshock_1_std = eshock_std; %Standard deviation of expectation shock for agent 1
eshock_2_mean = 0; %Mean of expectation shock for agent 2 
eshock_2_std = eshock_std;  %Standard deviation of expectation shock for agent 2
eshock = [eshock_1_on,eshock_1_mean,eshock_1_std,eshock_ro;eshock_2_on,eshock_2_mean,eshock_2_std,eshock_ro];

%% Get steady state values
ss = get_steadystates(alpha,beta,delta,psi);

%% Get ree solutions
[Pbar,Mbar1,Mbar2] = get_ree(ro,beta,gamma,constant_2);

%% Get gamma coefficients
[G] = get_gammas();
 
%% Initialize Variables for Simulation

% Starting values for parameter estimates; 
ahoc = .9; %Value for initial condition of parameter estimates
P = ahoc*Pbar; %Starting values for parameter estimates; %First value is phi_c1, second value is phi_d

%Create storage for simulation runs
r_mean = zeros(n,1);
r_var = zeros(n,1);
pd_mean = zeros(n,1);
pd_var = zeros(n,1);
pd_auto = zeros(n,1);
dc_var = zeros(n,1);
dd_var = zeros(n,1);


%% Begin Simulation

for i = 1:n
    
    shock = sde*randn(sT+2,1); %Productivity shock values
    eshock_1_wn = eshock_1_std*randn(sT+2,1); %Expectation shock white noise values for agent 1
    eshock_2_wn = eshock_2_std*randn(sT+2,1); %Expectation shock white noise values for agent 2
    eshock_wn = [eshock_1_wn,eshock_2_wn]; %Expectation shock white noise values
    P_0 = get_vmap(P,mu,a,b,ro)*shock(1); %Initial value for equity price
    Z_0 = shock(1); %Initial value for shock
    
    %Get law of motion for all variables (log deviation from the ss
    [allvariables] = lom_learn_cg(a,b,ro,G,P,Mbar1,Mbar2,P_0,Z_0,shock,mu,sT,gain,eshock,eshock_wn,constant_2);
    
    %Get levels of all variables
    allvariables_levels = get_levels(ss,sT,allvariables,burn);
    
    %% Get moments
    [r_mean(i),pd_mean(i),pd_var(i)] = msm_calculate_moments(allvariables_levels);

end


%% Calculate criterion function

r = mean(r_mean);
pd_1 = mean(pd_mean);
pd_2 = mean(pd_var);


mom_diff_1 = r-EM(1);
mom_diff_2 = pd_1-EM(2);
mom_diff_3 = pd_2-EM(3);

g_sT = [mom_diff_1;mom_diff_2;mom_diff_3];

end